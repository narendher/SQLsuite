/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChooseTablePanel.java
 *
 * Created on Mar 8, 2012, 5:27:01 PM
 */
package sqlsuite;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Administrator
 */
public class ChooseTablePanel extends javax.swing.JPanel {
public ResultSetMetaData rsmd;
public int n;
public int k=0;
int flag=0;
    /** Creates new form ChooseTablePanel */
    public ChooseTablePanel() {
        initComponents();
        jButton_Condition.setVisible(false);
        String name=StaticData.tablename_ins;
        jTable_TableContents.setEnabled(true);
        insertIntoTable(name);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_TableContents = new javax.swing.JTable();
        jButton_TableList = new javax.swing.JButton();
        jButton_Addrow = new javax.swing.JButton();
        jButton_Condition = new javax.swing.JButton();
        jButton_Save = new javax.swing.JButton();
        jButton_Delete = new javax.swing.JButton();
        jB_closeTab = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 255)));
        setMinimumSize(new java.awt.Dimension(600, 700));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 3, 24));
        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setText("SQL SUITE FOR ORACLE");
        jLabel2.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(255, 255, 255)));
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 320, -1));

        jTable_TableContents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }

        )
        {
            public boolean isCellEditable(int row, int column){
                if(row <StaticData.noOfRows) return false;
                return true;}
        }
    );
    jTable_TableContents.setEnabled(false);
    jScrollPane1.setViewportView(jTable_TableContents);

    add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 200, 640, 270));

    jButton_TableList.setFont(new java.awt.Font("Dialog", 1, 12));
    jButton_TableList.setForeground(new java.awt.Color(0, 0, 153));
    jButton_TableList.setText("Choose Another Table");
    jButton_TableList.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 204)));
    jButton_TableList.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton_TableListActionPerformed(evt);
        }
    });
    add(jButton_TableList, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 490, -1, 42));

    jButton_Addrow.setFont(new java.awt.Font("Dialog", 1, 12));
    jButton_Addrow.setForeground(new java.awt.Color(0, 0, 153));
    jButton_Addrow.setText("Add Row");
    jButton_Addrow.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 204)));
    jButton_Addrow.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton_AddrowActionPerformed(evt);
        }
    });
    add(jButton_Addrow, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 490, 97, 41));

    jButton_Condition.setFont(new java.awt.Font("Dialog", 1, 12));
    jButton_Condition.setForeground(new java.awt.Color(0, 0, 153));
    jButton_Condition.setText("Condition Retrieval");
    jButton_Condition.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 204)));
    jButton_Condition.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton_ConditionActionPerformed(evt);
        }
    });
    add(jButton_Condition, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 550, -1, 41));

    jButton_Save.setFont(new java.awt.Font("Dialog", 1, 12));
    jButton_Save.setForeground(new java.awt.Color(0, 0, 153));
    jButton_Save.setText("Save Changes");
    jButton_Save.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 204)));
    jButton_Save.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton_SaveActionPerformed(evt);
        }
    });
    add(jButton_Save, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 490, 100, 42));

    jButton_Delete.setFont(new java.awt.Font("Dialog", 1, 12));
    jButton_Delete.setForeground(new java.awt.Color(0, 0, 153));
    jButton_Delete.setText("Delete Row");
    jButton_Delete.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 255)));
    jButton_Delete.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton_DeleteActionPerformed(evt);
        }
    });
    add(jButton_Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 490, 114, 41));

    jB_closeTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sqlsuite/cross.jpg"))); // NOI18N
    jB_closeTab.setToolTipText("Close Tab");
    jB_closeTab.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jB_closeTabActionPerformed(evt);
        }
    });
    add(jB_closeTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 50, 30, 30));

    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sqlsuite/powerpoint-curve-background.jpg"))); // NOI18N
    jLabel1.setText("jLabel1");
    add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 710));
    }// </editor-fold>//GEN-END:initComponents

private void jButton_TableListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_TableListActionPerformed
// TODO add your handling code here:
    
    int confirm=JOptionPane.showConfirmDialog(null,"Are you sure to QUIT and Save the changes?","MESSAGE",JOptionPane.YES_NO_OPTION);
 if(confirm==0)
    {
        
        //Savechanges();
        jButton_SaveActionPerformed(evt);
       // StaticData.choice=0;
        //new SelectTableFrame().setVisible(true);
        //dispose();
        MainWindowClass.jTabbedPane_view.remove(MainWindowClass.tabins);
        MainWindowClass.jTabbedPane_view.add(new SelectTablePanel_insert(),MainWindowClass.tabins);
        MainWindowClass.jTabbedPane_view.setTitleAt(MainWindowClass.tabins,"Insert/Retrieve");
        MainWindowClass.jTabbedPane_view.setSelectedIndex(MainWindowClass.tabins);
    }
}//GEN-LAST:event_jButton_TableListActionPerformed

private void jButton_AddrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddrowActionPerformed
// TODO add your handling code here:
    flag=1;
    ((DefaultTableModel)jTable_TableContents.getModel()).addRow(new Object[3]);
    k++;
    //jTable_TableContents.setCellEditor();
}//GEN-LAST:event_jButton_AddrowActionPerformed

private void jButton_ConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ConditionActionPerformed
    // TODO add your handling code here:
    if(flag==0)
    {
        //dispose();
        new ConditionFrame().setVisible(true);
        
    }
    else
    {
        int confirm=JOptionPane.showConfirmDialog(null,"Are you sure to QUIT without Saving?","Message",JOptionPane.YES_NO_OPTION);
        if(confirm==0)
        {
            //dispose();
            new ConditionFrame().setVisible(true);
        }
    }
}//GEN-LAST:event_jButton_ConditionActionPerformed

private void jButton_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SaveActionPerformed
 // TODO add your handling code here:
    
    jTable_TableContents.removeFocusListener(null);
    int x=1;
    int p=0;
    try
    {
//        jTable_TableContents.setColumnSelectionInterval(0, 0);
//        jTable_TableContents.setRowSelectionInterval(0,0);
//        jTable_TableContents.requestFocus();
        jButton_Addrow.requestFocus();
        for(int i=StaticData.noOfRows;i<(StaticData.noOfRows+k);i++)
        {
            String qry = "insert into "+StaticData.tablename_ins+" values(";
            int columns=jTable_TableContents.getColumnCount();
            System.out.println(columns);
            for(int a=0;a<columns;a++)
            {
                System.out.println(jTable_TableContents.getValueAt(i,a));
                qry+=(String)"'"+jTable_TableContents.getValueAt(i,a)+"',";
            }
            qry=qry.substring(0,qry.length()-1);
            qry+=");";
            x=EstablishConnection.connec(qry);
            if(x==0)
            {
                break;
            }
            p++;
            //JOptionPane.showMessageDialog(null,"Table Not Updated");
            //JOptionPane.showMessageDialog(null,"Table UPdated"); 
        }
        StaticData.noOfRows=StaticData.noOfRows+p;        
    }
    catch(Exception ex)
    {
       System.out.println("Error"+ex);
    }
    if(x==0)
    {
        JOptionPane.showMessageDialog(null,"Table Not Updated","ERROR",JOptionPane.WARNING_MESSAGE);
    }
    else
    {
        JOptionPane.showMessageDialog(null,"Table Updated","Message",JOptionPane.INFORMATION_MESSAGE);
        flag=0;
        //StaticData.noOfRows=((DefaultTableModel)jTable_TableContents.getModel()).getRowCount();
    }
}//GEN-LAST:event_jButton_SaveActionPerformed

private void jButton_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeleteActionPerformed
        // TODO add your handling code here:        
        int del=1;
        int i=0;
        int p=0;
        int count3[]=jTable_TableContents.getSelectedRows();
        if(count3.length==0)
        {
            JOptionPane.showMessageDialog(null,"Please Select a row to perform Delete operation","Information",JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            int confirm=JOptionPane.showConfirmDialog(null,"Are you sure to Delete?","Message",JOptionPane.YES_NO_OPTION);
            if(confirm==0)
            {
                String st="";
                try
                {
                    //Savechanges();
                    for(i=0;i<count3.length;i++)
                    {
                        System.out.println("rowbno:"+count3[i]);
                        if(count3[i]<StaticData.noOfRows)
                        {
                            st="Delete from "+StaticData.tablename_ins+" where ";
                            for(int u=0;u<jTable_TableContents.getColumnCount();u++)
                            {
                                if(jTable_TableContents.getValueAt(count3[i], u)==null)
                                {
                                    st+=""+jTable_TableContents.getColumnName(u)+"=null AND ";
                                }
                                else
                                {
                                st+=""+jTable_TableContents.getColumnName(u)+"='"+jTable_TableContents.getValueAt(count3[i],u)+"' AND ";
                                }
                            }
                            st=st.substring(0,st.length()-5);
                            st+=";";
                            System.out.println("string"+st);
                            EstablishConnection.connec(st);
//                            if(re==0)
//                            {
//                                break;                            
//                            }
                            //((DefaultTableModel)jTable_TableContents.getModel()).removeRow(count3[i]);                            
                        p++;
                        }                           
                    } 
                    for(i=0;i<count3.length;i++)
                    {
                            if(count3[i]>=StaticData.noOfRows)
                            {
                            ((DefaultTableModel)jTable_TableContents.getModel()).removeRow(count3[i]);    
                            }
                    }
                    for(i=0;i<count3.length;i++)
                    {
                        if(count3[i]<StaticData.noOfRows)
                            ((DefaultTableModel)jTable_TableContents.getModel()).removeRow(count3[i]);
                    }
                    StaticData.noOfRows=StaticData.noOfRows-p;                    
                    del=0;
                    //if(re==0)
//                    {
//                       JOptionPane.showMessageDialog(null, "Error:Delete Operation is unsuccessfull"); 
//                       StaticData.noOfRows=StaticData.noOfRows-i;
//                    }
//                    else
//                    {
//                        StaticData.noOfRows=StaticData.noOfRows-i;
//                        JOptionPane.showMessageDialog(null, "Deletion Is Successfull");
//                    }      
                    JOptionPane.showMessageDialog(null,"QUERY:"+st,"QUERY INFORMATION",JOptionPane.INFORMATION_MESSAGE);
                }
                catch(Exception ex)
                {
                    
                    System.out.println("exception:"+ex);
                }
            }
        }
}//GEN-LAST:event_jButton_DeleteActionPerformed

private void jB_closeTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_closeTabActionPerformed
int confirm=JOptionPane.showConfirmDialog(null,"Are you sure to close this tab?","Message",JOptionPane.YES_NO_OPTION);
//int confirm=JOptionPane.showConfirmDialog(null, "Error is here", "Error", YES, WIDTH)       
if(confirm==0)
         {
                MainWindowClass.jTabbedPane_view.remove(MainWindowClass.tabins);
                MainWindowClass.ins="close";
                //MainWindowClass.jTabbedPane_view.
                MyUtilities.closeTab(MainWindowClass.tabins);
         }
}//GEN-LAST:event_jB_closeTabActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_closeTab;
    private javax.swing.JButton jButton_Addrow;
    private javax.swing.JButton jButton_Condition;
    private javax.swing.JButton jButton_Delete;
    private javax.swing.JButton jButton_Save;
    private javax.swing.JButton jButton_TableList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_TableContents;
    // End of variables declaration//GEN-END:variables

    private void insertIntoTable(String insertTableName) {
        try{            
            n=0;
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection conn = DriverManager.getConnection("jdbc:odbc:MyPrjDSN",StaticData.userid,StaticData.password);
            Statement stmt = conn.createStatement();
            String qry = "select * from "+insertTableName;
            ResultSet rs = stmt.executeQuery(qry);
            rsmd =rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            //String type[]=new String[columnCount+1];
            for(int i=1;i<=columnCount;i++)
            {
                StaticData.columntype[i]=rsmd.getColumnTypeName(i);
                System.out.println(StaticData.columntype[i]);
                String value=rsmd.getColumnName(i);
//                value+="("+rsmd.getColumnTypeName(i)+")";
                ((DefaultTableModel)jTable_TableContents.getModel()).addColumn(value);
            }
            String data[]=new String[columnCount];
            while(rs.next())
            {
                   for(int i=1,t=0;i<=columnCount;i++,t++)
                   {
                          data[t]=rs.getString(i);
                   }
                   //pid[n]=n+1;
                   n++;
                   //jTable1.addRow((Object[])data);'
                   ((DefaultTableModel)jTable_TableContents.getModel()).addRow((Object[])data);
           }
            StaticData.noOfRows=((DefaultTableModel)jTable_TableContents.getModel()).getRowCount();
//            data[(columnCount+1)]=null;
//            ((DefaultTableModel)jTable_TableContents.getModel()).addRow((Object[])data);
        } 
        catch (SQLException ex) {
            Logger.getLogger(ChooseTablePanel.class.getName()).log(Level.SEVERE, null, ex);
        }        catch (ClassNotFoundException ex) 
        {
            System.out.println("sg"+ex);
        }
    }
}
