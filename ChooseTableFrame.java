 /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
 /*
 * ChooseTableFrame.java
 *
 * Created on Dec 19, 2011, 8:56:35 PM
 */
package sqlsuite;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
 /**
 *
 * @author Narendher
 */
public class ChooseTableFrame extends javax.swing.JFrame {
public ResultSetMetaData rsmd;
public int n;
public int k=0;
int flag=0;
int datetype=-1;
//int pid[];
    JTable jTable_TableContents2;
    /** Creates new form ChooseTableFrame */
    public ChooseTableFrame() throws SQLException {
        initComponents();
//    //TableColumn gradeColumn =jTable_TableContents.getColumnModel().getColumn(0);
//    //JComboBox comboBox = null;
//    //comboBox.removeAllItems();
//    //try {
//        comboBox.addItem("Item 1");
//        comboBox.addItem("Item 2");
//        comboBox.addItem("Item 3");
//    } catch (NullPointerException e) {
//    } catch (Exception e) {
//    }
//    gradeColumn.setCellEditor(new DefaultCellEditor(comboBox));
        String name=StaticData.tablename;
        setLocationRelativeTo(null);
//        jTable_TableContents2= new JTable(((DefaultTableModel)jTable_TableContents.getModel())){  
//            @Override
//      public boolean isCellEditable(int row, int column){  
//        if(row == jTable_TableContents2.getRowCount()-1) return true;  
//        return false;}};
        jTable_TableContents.setEnabled(true);
        insertIntoTable(name);
         //resultSetRetrieve();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
    **/
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_TableContents = new javax.swing.JTable();
        jButton_TableList = new javax.swing.JButton();
        jButton_Addrow = new javax.swing.JButton();
        jButton_Condition = new javax.swing.JButton();
        jButton_Save = new javax.swing.JButton();
        jButton_Delete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("TableContentsFrame");
        setMinimumSize(new java.awt.Dimension(735, 435));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jTable_TableContents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }

        )
        {
            public boolean isCellEditable(int row, int column){
                if(row <StaticData.noOfRows) return false;
                return true;}
        }
    );
    jTable_TableContents.setEnabled(false);
    jTable_TableContents.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    jScrollPane1.setViewportView(jTable_TableContents);

    getContentPane().add(jScrollPane1);
    jScrollPane1.setBounds(50, 100, 640, 230);

    jButton_TableList.setFont(new java.awt.Font("Dialog", 1, 12));
    jButton_TableList.setForeground(new java.awt.Color(0, 0, 153));
    jButton_TableList.setText("Choose Another Table");
    jButton_TableList.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 204)));
    jButton_TableList.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton_TableListActionPerformed(evt);
        }
    });
    getContentPane().add(jButton_TableList);
    jButton_TableList.setBounds(46, 354, 129, 42);

    jButton_Addrow.setFont(new java.awt.Font("Dialog", 1, 12));
    jButton_Addrow.setForeground(new java.awt.Color(0, 0, 153));
    jButton_Addrow.setText("Add Row");
    jButton_Addrow.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 204)));
    jButton_Addrow.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton_AddrowActionPerformed(evt);
        }
    });
    getContentPane().add(jButton_Addrow);
    jButton_Addrow.setBounds(203, 355, 97, 41);

    jButton_Condition.setFont(new java.awt.Font("Dialog", 1, 12));
    jButton_Condition.setForeground(new java.awt.Color(0, 0, 153));
    jButton_Condition.setText("Condition Retrieval");
    jButton_Condition.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 204)));
    jButton_Condition.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton_ConditionActionPerformed(evt);
        }
    });
    getContentPane().add(jButton_Condition);
    jButton_Condition.setBounds(310, 355, 111, 41);

    jButton_Save.setFont(new java.awt.Font("Dialog", 1, 12));
    jButton_Save.setForeground(new java.awt.Color(0, 0, 153));
    jButton_Save.setText("Save Changes");
    jButton_Save.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 204)));
    jButton_Save.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton_SaveActionPerformed(evt);
        }
    });
    getContentPane().add(jButton_Save);
    jButton_Save.setBounds(451, 354, 85, 42);

    jButton_Delete.setFont(new java.awt.Font("Dialog", 1, 12));
    jButton_Delete.setForeground(new java.awt.Color(0, 0, 153));
    jButton_Delete.setText("Delete Row");
    jButton_Delete.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 255)));
    jButton_Delete.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton_DeleteActionPerformed(evt);
        }
    });
    getContentPane().add(jButton_Delete);
    jButton_Delete.setBounds(570, 355, 114, 41);

    jLabel2.setFont(new java.awt.Font("Comic Sans MS", 3, 24));
    jLabel2.setForeground(new java.awt.Color(0, 0, 204));
    jLabel2.setText("SQL SUITE FOR ORACLE");
    jLabel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 255), new java.awt.Color(0, 0, 255), null, null));
    getContentPane().add(jLabel2);
    jLabel2.setBounds(220, 50, 320, 40);

    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sqlsuite/powerpoint-curve-background.jpg"))); // NOI18N
    jLabel1.setText("jLabel1");
    jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 204)));
    getContentPane().add(jLabel1);
    jLabel1.setBounds(0, 10, 710, 400);

    pack();
    }// </editor-fold>//GEN-END:initComponents
private void jButton_TableListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_TableListActionPerformed
// TODO add your handling code here:
    
    int confirm=JOptionPane.showConfirmDialog(null,"Are you sure to QUIT and Save the changes?","Message",JOptionPane.YES_NO_OPTION);
 if(confirm==0)
    {
        
        //Savechanges();
        jButton_SaveActionPerformed(evt);
        StaticData.choice=0;
        new SelectTableFrame().setVisible(true);
        dispose();
    }
}//GEN-LAST:event_jButton_TableListActionPerformed
private void jButton_AddrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddrowActionPerformed
// TODO add your handling code here:
    flag=1;
    ((DefaultTableModel)jTable_TableContents.getModel()).addRow(new Object[3]);
    if(datetype>=0)
    {
        jTable_TableContents.setValueAt("DD/MM/YYYY", StaticData.noOfRows, datetype);
    }
    k++;
    //jTable_TableContents.setCellEditor();
}//GEN-LAST:event_jButton_AddrowActionPerformed
private void jButton_ConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ConditionActionPerformed
    // TODO add your handling code here:
    if(flag==0)
    {
        dispose();
        new ConditionFrame().setVisible(true);
    }
    else
    {
        int confirm=JOptionPane.showConfirmDialog(null,"Are you sure to QUIT without Saving?","Message",JOptionPane.YES_NO_OPTION);
        if(confirm==0)
        {
            dispose();
            new ConditionFrame().setVisible(true);
        }
    }
}//GEN-LAST:event_jButton_ConditionActionPerformed
private void jButton_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SaveActionPerformed
 // TODO add your handling code here:
    
    jTable_TableContents.removeFocusListener(null);
    int x=1;
    int p=0;
    try
    {
//        jTable_TableContents.setColumnSelectionInterval(0, 0);
//        jTable_TableContents.setRowSelectionInterval(0,0);
//        jTable_TableContents.requestFocus();
        jButton_Addrow.requestFocus();
        for(int i=StaticData.noOfRows;i<(StaticData.noOfRows+k);i++)
        {
            String qry = "insert into "+StaticData.tablename+" values(";
            int columns=jTable_TableContents.getColumnCount();
            System.out.println(columns);
            for(int a=0;a<columns;a++)
            {
                System.out.println(jTable_TableContents.getValueAt(i,a));
                qry+=(String)"'"+jTable_TableContents.getValueAt(i,a)+"',";
            }
            qry=qry.substring(0,qry.length()-1);
            qry+=");";
            x=EstablishConnection.connec(qry);
            if(x==0)
            {
                break;
            }
            p++;
            //JOptionPane.showMessageDialog(null,"Table Not Updated");
            //JOptionPane.showMessageDialog(null,"Table UPdated"); 
        }
        StaticData.noOfRows=StaticData.noOfRows+p;        
    }
    catch(Exception ex)
    {
       System.out.println("Error"+ex);
    }
    if(x==0)
    {
        JOptionPane.showMessageDialog(null,"Table Not Updated");
    }
    else
    {
        JOptionPane.showMessageDialog(null,"Table Updated");
        flag=0;
        //StaticData.noOfRows=((DefaultTableModel)jTable_TableContents.getModel()).getRowCount();
    }
}//GEN-LAST:event_jButton_SaveActionPerformed
private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here:
 int confirm=JOptionPane.showConfirmDialog(null,"Are you sure to QUIT?","Message",JOptionPane.YES_NO_OPTION);
 if(confirm==0)
 {
        new MenuWindowFrame().setVisible(true);
        dispose();
        return;
 }
 else
        return;
}//GEN-LAST:event_formWindowClosing
    private void jButton_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeleteActionPerformed
        // TODO add your handling code here:        
        int del=1;
        int i=0;
        int p=0;
        int count3[]=jTable_TableContents.getSelectedRows();
        if(count3.length==0)
        {
            JOptionPane.showMessageDialog(null,"Please Select a row to perform Delete operation");
        }
        else
        {
            int confirm=JOptionPane.showConfirmDialog(null,"Are you sure to Delete?","Message",JOptionPane.YES_NO_OPTION);
            if(confirm==0)
            {
                try
                {
                    //Savechanges();
                    for(i=0;i<count3.length;i++)
                    {
                        System.out.println("rowbno:"+count3[i]);
                        if(count3[i]<StaticData.noOfRows)
                        {
                            String st="Delete from "+StaticData.tablename+" where ";
                            for(int u=0;u<jTable_TableContents.getColumnCount();u++)
                            {
                                if(jTable_TableContents.getValueAt(count3[i], u)==null)
                                {
                                    st+=""+jTable_TableContents.getColumnName(u)+"=null AND ";
                                }
                                else
                                {
                                st+=""+jTable_TableContents.getColumnName(u)+"='"+jTable_TableContents.getValueAt(count3[i],u)+"' AND ";
                                }
                            }
                            st=st.substring(0,st.length()-5);
                            st+=";";
                            System.out.println("string"+st);
                            EstablishConnection.connec(st);
//                            if(re==0)
//                            {
//                                break;                            
//                            }
                            //((DefaultTableModel)jTable_TableContents.getModel()).removeRow(count3[i]);                            
                        p++;
                        }                           
                    } 
                    for(i=0;i<count3.length;i++)
                    {
                            if(count3[i]>=StaticData.noOfRows)
                            {
                            ((DefaultTableModel)jTable_TableContents.getModel()).removeRow(count3[i]);    
                            }
                    }
                    for(i=0;i<count3.length;i++)
                    {
                        if(count3[i]<StaticData.noOfRows)
                            ((DefaultTableModel)jTable_TableContents.getModel()).removeRow(count3[i]);
                    }
                    StaticData.noOfRows=StaticData.noOfRows-p;                    
                    del=0;
                    //if(re==0)
//                    {
//                       JOptionPane.showMessageDialog(null, "Error:Delete Operation is unsuccessfull"); 
//                       StaticData.noOfRows=StaticData.noOfRows-i;
//                    }
//                    else
//                    {
//                        StaticData.noOfRows=StaticData.noOfRows-i;
//                        JOptionPane.showMessageDialog(null, "Deletion Is Successfull");
//                    }                    
                }
                catch(Exception ex)
                {
                    System.out.println("exception:"+ex);
                }
            }
        }
    }//GEN-LAST:event_jButton_DeleteActionPerformed
private void insertIntoTable(String insertTableName) throws SQLException 
{
        try{            
            n=0;
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection conn = DriverManager.getConnection("jdbc:odbc:MyPrjDSN",StaticData.userid,StaticData.password);
            Statement stmt = conn.createStatement();
            String qry = "select * from "+insertTableName;
            ResultSet rs = stmt.executeQuery(qry);
            rsmd =rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            //String type[]=new String[columnCount+1];
            for(int i=1;i<=columnCount;i++)
            {
                StaticData.columntype[i]=rsmd.getColumnTypeName(i);
                System.out.println(StaticData.columntype[i]);
                String value=rsmd.getColumnName(i);
                value+="("+rsmd.getColumnTypeName(i)+")";
                if(rsmd.getColumnTypeName(i).equals("DATE"))
                {
                 value+="DD/MM/YYYY";   
                }
                ((DefaultTableModel)jTable_TableContents.getModel()).addColumn(value);
                
            }
            String data[]=new String[columnCount];
            while(rs.next())
            {
                   for(int i=1,t=0;i<=columnCount;i++,t++)
                   {
                          data[t]=rs.getString(i);
                   }
                   //pid[n]=n+1;
                   n++;
                   //jTable1.addRow((Object[])data);'
                   ((DefaultTableModel)jTable_TableContents.getModel()).addRow((Object[])data);
           }
            StaticData.noOfRows=((DefaultTableModel)jTable_TableContents.getModel()).getRowCount();
//            data[(columnCount+1)]=null;
//            ((DefaultTableModel)jTable_TableContents.getModel()).addRow((Object[])data);
        } 
        catch (ClassNotFoundException ex) 
        {
            System.out.println("sg"+ex);
        }
}
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new ChooseTableFrame().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(ChooseTableFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Addrow;
    private javax.swing.JButton jButton_Condition;
    private javax.swing.JButton jButton_Delete;
    private javax.swing.JButton jButton_Save;
    private javax.swing.JButton jButton_TableList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_TableContents;
    // End of variables declaration//GEN-END:variables
//public void resultSetRetrieve() throws SQLException {
//   System.out.println("TName: are as follow");
//        try{
//            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
//            Connection conn=DriverManager.getConnection("jdbc:odbc:MyPrjDSN","project","password");
//            Statement stmt=conn.createStatement();
//            ResultSet resultSet=stmt.executeQuery("select * from tab");
//            while(resultSet.next())
//            {
//                String value=resultSet.getString("TNAME");
//                System.out.println("TName:"+value);
//               jCB_Desc.addItem((Object)value);
//            }
//            resultSet.close();
//        }
//        catch(Exception e)
//        {
//            System.out.println("Exception: "+e);
//        }
//       String insertTableName=(String)jCB_Desc.getSelectedItem();
//       insertIntoTable(insertTableName);
//    }

    private void Savechanges() {
        int x=1;
        try
        {
            for(int i=n;i<(n+k);i++)
            {
                String qry = "insert into "+StaticData.tablename+" values(";
                int columns=jTable_TableContents.getColumnCount();
                System.out.println(columns);
                for(int a=0;a<columns;a++)
                {
                    System.out.println(jTable_TableContents.getValueAt(i,a));

                    qry+=(String)"'"+jTable_TableContents.getValueAt(i,a)+"',";
                }
                qry=qry.substring(0,qry.length()-1);
                qry+=");";
                x=EstablishConnection.connec(qry);
                            if(x==0)
                                break;
                                //JOptionPane.showMessageDialog(null,"Table Not Updated");
                            //JOptionPane.showMessageDialog(null,"Table UPdated"); 
            }
            k=0;
            int n=jTable_TableContents.getComponentCount();
        }
        catch(Exception ex)
        {
           System.out.println("Error"+ex);
        }
    if(x==0)
    {
        JOptionPane.showMessageDialog(null,"Table Not Updated");
    }
    else
    {
        JOptionPane.showMessageDialog(null,"Table Updated");
        flag=0;
    }
    }

  
}